{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pham The Dzung\\\\Documents\\\\Suffering\\\\Year 1\\\\Orbital\\\\trial\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from \"react\";\nimport { timeout } from \"q\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: this.props.value,\n      tags: []\n    };\n    this.styles = {\n      fontSize: 15,\n      fontWeight: \"bold\"\n    };\n\n    this.handleIncrement = () => {\n      // console.log(\"Increment Clicked\", this);\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n  }\n\n  // constructor() {\n  //   super();\n  //   this.handleIncrement = this.handleIncrement.bind(this);\n  // }\n  render() {\n    console.log(\"props\", this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: this.styles,\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"button\", {\n      onClick: this.handleIncrement,\n      className: \"btn btn-secondary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Increment\")); //JSX component\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const count = this.state.count;\n    return count === 0 ? \"Zero\" : count;\n  } // renderTags() {\n  //   if (this.state.tags.length === 0) return <p>There are no tags.</p>;\n  //   return (\n  //     <ul>\n  //       {this.state.tags.map(tag => (\n  //         <li key={tag}>{tag}</li>\n  //       ))}\n  //       {/* mapping string to JSX expression, similar to lazy coding  */}\n  //     </ul>\n  //   );\n  // }\n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:\\Users\\Pham The Dzung\\Documents\\Suffering\\Year 1\\Orbital\\trial\\src\\components\\counter.jsx"],"names":["React","Component","timeout","Counter","state","count","props","value","tags","styles","fontSize","fontWeight","handleIncrement","setState","render","console","log","getBadgeClasses","formatCount","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,GAAxB;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BG,KAD8B,GACtB;AACNC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,KADZ;AAENC,MAAAA,IAAI,EAAE;AAFA,KADsB;AAAA,SAM9BC,MAN8B,GAMrB;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,UAAU,EAAE;AAFL,KANqB;;AAAA,SAkC9BC,eAlC8B,GAkCZ,MAAM;AACtB;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KArC6B;AAAA;;AAW9B;AACA;AACA;AACA;AAEAS,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKV,KAA1B;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE,KAAKG,MAAlB;AAA0B,MAAA,SAAS,EAAE,KAAKQ,eAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKC,WAAL,EAFH,CADF,EAKE;AACE,MAAA,OAAO,EAAE,KAAKN,eADhB;AAEE,MAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,CADF,CAFO,CAeJ;AACJ;;AAODK,EAAAA,eAAe,GAAG;AAChB,QAAIE,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKf,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,WAAOc,OAAP;AACD;;AAEDD,EAAAA,WAAW,GAAG;AAAA,UACJb,KADI,GACM,KAAKD,KADX,CACJC,KADI;AAEZ,WAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD,GAhD6B,CAkD9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA5D8B;;AA+DhC,eAAeF,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { timeout } from \"q\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: this.props.value,\r\n    tags: []\r\n  };\r\n\r\n  styles = {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);\r\n  // }\r\n\r\n  render() {\r\n    console.log(\"props\", this.props);\r\n    return (\r\n      <div>\r\n        <span style={this.styles} className={this.getBadgeClasses()}>\r\n          {/* {{ fontSize: 30 }} */}\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n          onClick={this.handleIncrement}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n      </div>\r\n    ); //JSX component\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    // console.log(\"Increment Clicked\", this);\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { count } = this.state;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>There are no tags.</p>;\r\n  //   return (\r\n  //     <ul>\r\n  //       {this.state.tags.map(tag => (\r\n  //         <li key={tag}>{tag}</li>\r\n  //       ))}\r\n  //       {/* mapping string to JSX expression, similar to lazy coding  */}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n}\r\n\r\nexport default Counter;\r\n"]},"metadata":{},"sourceType":"module"}